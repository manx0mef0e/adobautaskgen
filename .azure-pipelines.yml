name: "$(BuildDefinitionName)_$(date:yyyyMMdd)_$(rev:.r)"

trigger:
  branches:
    include: ["main"]

variables:
  - template: "build/pipeline-variables.yml"
  - group: "SSH for GitHub"

pool:
  vmImage: $(vmImageName)

stages:
  # Static code and Unit tests
  - stage: "tests"
    displayName: "tests"
    jobs:
      - job: linting
        displayName: "Linting"
        steps:

      - job: "unitTests"
        displayName: "Unit Tests"
        continueOnError: false
        steps:
          - task: PowerShell@2
            displayName: "Pester Tests"
            inputs:
              filePath: $(System.DefaultWorkingDirectory)/build/build.ps1
              arguments: -Task UnitTests -ResolveDependency
              pwsh: true
          - task: PublishTestResults@2
            displayName: "Publish Test Results"
            inputs:
              testResultsFormat: "JUnit"
              testResultsFiles: "**/pesterTests.xml"
              searchFolder: "$(System.DefaultWorkingDirectory)/TestResults/"
              failTaskOnFailedTests: true
              testRunTitle: "PESTER"
          - task: PublishCodeCoverageResults@1
            displayName: "Publish Code Coverage Results"
            inputs:
              codeCoverageTool: "JaCoCo"
              summaryFileLocation: "$(System.DefaultWorkingDirectory)/TestResults/codeCoverage.xml"
              pathToSources: "$(System.DefaultWorkingDirectory)/src/"
              # reportDirectory: # Optional
              failIfCoverageEmpty: true

  # Build
  - stage: "build"
    displayName: "Build"
    dependsOn: "tests"
    jobs:
      - job: "bumpVersion"
        displayName: "Bump Version"
        continueOnError: false
        steps:
          - task: InstallSSHKey@0
            displayName: "Install SSH Key"
            inputs:
              knownHostEntry: "$(gitSshKnownHosts)"
              sshPublicKey: "$(gitSshPublicKey)"
              sshKeySecureFile: "sshKeySecureFile"

  # TODO: Deploy
